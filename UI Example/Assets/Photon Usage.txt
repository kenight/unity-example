--- Photon usage ---

PhotonNetwork.Instantiate

MonoBehaviour.Instantiate 创建的 GameObject 只存在与本地客户端
PhotonNetwork.Instantiate 创建的 GameObject 除了本地外，还会同步到连入的远程客户端
由 PhotonNetwork.Instantiate 创建的 GameObject 必须有 PhotonView Component

通过 RPC 方式方式可手动创建 Networked GameObject,
这一过程说明了 MonoBehaviour.Instantiate 创建的 GameObject 进行同步后，即可变为一个 Networked GameObject

PhotonView
用于标识 Networked GameObject, 同一个 PhotonView[ID] 存在与多个客户端上
Observe Option
Unreliable：不确认数据包是否送达，专注发送数据
Unreliable On Change：不确认数据包是否送达，但仅在有变动时发送数据
Reliable Delta Compressed：确认数据包送达客户端，并计算客户端最后收到的数据与当前数据进行比较，如果没有变化则不发送，反之发送数据
Off：始终不发送，如果使用 RPC ，可以设置为 Off

PhotonView.isMine
假设 ClientA 创建了 PhotonView[1], 虽然 PhotonView[1] 在多个客户端都存在(在同步后，存在于本地与远程客户端)
但 isMine 标识的只是本地客户端中的 PhotonView[1]

PhotonPlayer
房间中 Player 的一个代表或摘要, 通过 photonView.owner 可以获取自己的 Player

三种同步方式：

1.Object Synchronization
通过 OnPhotonSerializeView() 方式同步参数
PUN 已提供一些 View 组件如 Photon Transform View 等来简化，其内部也是通过 OnPhotonSerializeView() 来实现的

2.Remote Procedure Call (RPC)
RPC 方法会被同房间里每个玩家(或者说是所有客户端，包括远程与当前本地客户端)在同一个 GameObjcet 上执行，可以触发整个场景效果，对由用户输入等触发的不常用动作很有用。

3.Custom Properties
使用 SetCustomProperties() 方法设置值，会自动进行同步
使用 ExitGames.Client.Photon.Hashtable props = photonView.owner.CustomProperties 获取 Properties
读取 if (props.ContainsKey("key")) { (int)props["key"] }





