--- Photon usage ---

PhotonNetwork.Instantiate

MonoBehaviour.Instantiate 创建的 GameObject 只存在与本地客户端
PhotonNetwork.Instantiate 创建的 GameObject 除了本地外，还会同步到连入的远程客户端
由 PhotonNetwork.Instantiate 创建的 GameObject 必须有 PhotonView Component

通过 RPC 方式方式可手动创建 Networked GameObject,
这一过程说明了 MonoBehaviour.Instantiate 创建的 GameObject 进行同步后，即可变为一个 Networked GameObject

PhotonView
用于标识 Networked GameObject, 同一个 PhotonView[ID] 存在与多个客户端上
Observe Option
Unreliable：不确认数据包是否送达，专注发送数据
Unreliable On Change：不确认数据包是否送达，但仅在有变动时发送数据
Reliable Delta Compressed：确认数据包送达客户端，并计算客户端最后收到的数据与当前数据进行比较，如果没有变化则不发送，反之发送数据
Off：始终不发送，如果使用 RPC ，可以设置为 Off

PhotonView.isMine
在本地客户端中，可能存在多个 ID 一致的 PhotonView, 如多个 Player(Clone), 代表多个玩家
对于这样的 PhotonView, 其中有一个是本地客户端创建的，则这个 PhotonView isMine
相应的的剩余的其他 Player(Clone) 则为其他玩家的远程实例，即 !isMine

PhotonPlayer
房间中 Player 的一个代表或摘要, 通过 photonView.owner 可以获取自己的 Player

三种同步方式：

1.Object Synchronization
通过 OnPhotonSerializeView() 方式同步参数
PUN 已提供一些 View 组件如 Photon Transform View 等来简化，其内部也是通过 OnPhotonSerializeView() 来实现的

2.Remote Procedure Call (RPC)
RPC 会执行目标 GameObjcet (PhotonView is target) 上的 PunRPC 方法
该 PunRPC 方法会被同房间里每个客户端 (取决于 PhotonTargets) 执行，对由用户输入等触发的不常用动作很有用
简单的讲：就是先获取要执行方法的游戏对象上的 PhotonView, 在调用 photonView.RPC 方法执行 PunRPC, 然后广播给所有客户端并执行

3.Custom Properties
使用 SetCustomProperties() 方法设置值，会自动进行同步，接收 ExitGames.Client.Photon.Hashtable
多个 properties 使用多个 SetCustomProperties(new Hashtable) 语句，Photon 会将所有 new Hashtable 转换为字符串键值对并封装在一起（player.CustomProperties）

读取值，方式一：
使用 ExitGames.Client.Photon.Hashtable props = photonView.owner.CustomProperties 获取 Properties
读取 if (props.ContainsKey("key")) { (int)props["key"] }
方式二：
object score;
(player.CustomProperties.TryGetValue("key", out score)
(int) score





